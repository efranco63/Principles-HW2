{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 I stored my database for this particular assignment using only one dictionary or table. I created a dictionary with a key \'91Headers\'92 that will include all the headers, with the exception of \'91Job ID\'92, as I will be using the Job IDs as keys for the dictionary. I originally proceeded by storing the data in a list of lists, however, when pulling up information for a particular Job ID, this would require much more computational effort than simply calling the dictionary value with that Job ID and pulling the information that way. Using a dictionary over a list of lists addresses the complication of data redundancy, as with unique key values I can ensure data is not unnecessarily reproduced. However, I now realize that the correct implementation of a relational database would\'92ve included multiple dictionaries instead of just one, with fields such as \'91Job ID\'92, \'91Agency\'92, and possibly one more as the relations, again for the purpose of eliminating redundancy and making searching easier.\
\
For pulling information on certain fields, I can determine the indices for each header in the list of headers in order to easily pull information from certain columns in the future. The list of headers is small and looping through the list and mapping indices will not require heavy computational effort. Using the dictionary facilitates inserting new fields compared to a list of lists, as I can just create a new key and assign the new row as its value, as well as sorting by Job IDs. The same applies to deleting database entries, since with the list you must deal with the issues that come with popping items from a list while looping through that list. \
\
To keep the database persistent, I will write the contents of my database dictionary into a text file, with each key separated by a new line and each value in the key separated by \'91|\'92, but I will also insert the key value into the front of this string. At the beginning of each call to the main function, I will call this database text file and load the contents into my dictionary. If the database file does not exist, I create and empty dictionary with the headers.}